from pathlib import Path
from b_scan_reader import BScan_reader
from file_paths import RAW_DATA_ROOT_DIR
import pandas
import json
import os
import pytest


@pytest.mark.unit_test
def test_load_anf_bscan():
    """
    Test Overview:
    Unit test to ensure that the load_bscan() function is able to load an .anf file.

    Test Requirements:
    This test passes if load_bscan() executes without raising an exception. This test fails if any exception is raised.

    Test Data:
    The test loads the bscan: "Scan Data - Pickering\P2011\R09\BSCAN Type D  R-09 Pickering A Unit-1 east 30-Jan-2020 105718 [A2536-2556][R1380-1800].anf"

    """
    try:
        input_scan_path = Path(RAW_DATA_ROOT_DIR / r"Scan Data - Pickering\P2011\R09\BSCAN Type D  R-09 Pickering A Unit-1 east 30-Jan-2020 105718 [A2536-2556][R1380-1800].anf")
        BScan_reader.load_bscan(input_scan_path)
    except:
        pytest.fail("Failed to load anf file.")


@pytest.mark.unit_test
def test_load_daq_bscan():
    """
    Test Overview:
    Unit test to ensure that the load_bscan() function is able to load a .daq file.

    Test Requirements:
    This test passes if load_bscan() executes without raising an exception. This test fails if any exception is raised.

    Test Data:
    The test loads the bscan: "Scan Data - Pickering\P2251\L12\BSCAN P2251 L12E 2022-Feb-01 223037 [A5002-5030].daq"
    """
    try:
        input_scan_path = Path(RAW_DATA_ROOT_DIR / r"Scan Data - Pickering\P2251\L12\BSCAN P2251 L12E 2022-Feb-01 223037 [A5002-5030].daq")
        BScan_reader.load_bscan(input_scan_path)
    except:
        pytest.fail("Failed to load anf file.")


def test_load_invalid_file():
    """
    Unit test to ensure that the load_bscan() raises an exception when it tries to load a file that doesn't have the .daq or .anf extension.

    This test passes if load_bscan() raises an exception. This test fails if load_bscan() executes without raising an exception.
    """
    with pytest.raises(FileNotFoundError):
        input_scan_path = Path(__file__)
        BScan_reader.load_bscan(input_scan_path)


@pytest.mark.regression_test
def test_build_Darlington_path():
    """
    Regression test to ensure that build_path() generates the expected paths when provided with a hardcoded row for a file from Darlington.

    This test passes if the paths to the A-Type and D-Type files generated by build_path() match their respective expected values.
    This path fails if either generated path does not match its expected value.
    """

    # Load a hardcoded row. Row data is stored as a dictionary, converted to json, then converted to a pandas Series.
    row_dict = {"Indication": "Ind 1", "Axial Start": 7636.1, "Rotary Start": 134.9, "Length (mm)": 1.8, "Width (deg)": 1.4, "Max Amp (dB)": -0.7, "Depth (mm)": 0.11,
     "Wall Thickness": "N\/R", "Flaw": "Debris", "Flaw-group": "Debris", "Flaw-general": "Debris", "DR": "R",
     "Header": "Notations recorded from ANDE data using FLAW Playback & Analysis Version 6.2", "Date Produced": 1492560000000, "Station": "DARLTON A", "Unit": 1, "Channel": "G-13",
     "Reactor Face": "WEST", "Channel End": "OUTLET", "Inspection Head": "BC18\/H48H", "Operator Name": "0", "Collection Date": 1491350400000, "Collection Time": "01:45:07.200000",
     "End of PT(1)": 2732, "Roll 1(1)": 2750, "Roll 2(1)": 2767, "Roll 3(1)": 2783, "Burnish(1)": 2799, "Burnish(2)": 9102, "Roll 3(2)": 9119, "Roll 2(2)": 9135, "Roll 1(2)": 9151,
     "End of PT(2)": 9170, "Outage Number": "D1711", "Filename": "BSCAN Type D  G-13 Darlington Unit-1 west 05-Apr-2017 034814 [A7630-7648][R1180-1550]", "Axial_start": 7630.0,
     "Axial_end": 7648.0, "Rotary_start": 1180.0, "Rotary_end": 1550.0, "Filename end": 0,
     "Note1": "Ind 2 exhibits characteristics of a FBBPF but is at an abnormal axial position.", "Note2": 0, "Note3": 0, "Note 4": 0, "Note 5": 0}
    row_string = json.dumps(row_dict)
    row = pandas.read_json(row_string, typ='series')

    expected_a_dir = Path(RAW_DATA_ROOT_DIR / r'Scan Data - Darlington\D1711\G13\BSCAN Type A  G-13 Darlington Unit-1 west 05-Apr-2017 034814 [A7630-7648][R1180-1550].anf')
    expected_d_dir = Path(RAW_DATA_ROOT_DIR / r'Scan Data - Darlington\D1711\G13\BSCAN Type D  G-13 Darlington Unit-1 west 05-Apr-2017 034814 [A7630-7648][R1180-1550].anf')

    b_scan_a_dir, b_scan_d_dir = BScan_reader.build_path(row, RAW_DATA_ROOT_DIR)

    assert expected_a_dir == b_scan_a_dir
    assert expected_d_dir == b_scan_d_dir


@pytest.mark.regression_test
def test_build_Pickering_path():
    """
    Regression test to ensure that build_path() generates the expected paths when provided with a hardcoded row for a file from Pickering.

    This test passes if the paths to the A-Type and D-Type files generated by build_path() match their respective expected values.
    This path fails if either generated path does not match its expected value.
    """
    row_dict = {"Outage Number": "P1361",
                "Filename": "BSCAN Type D  B-14 Pickering B Unit-6 west 15-Oct-2013 160926 [A2370-2503][R0-3599]",
                "Channel": "B-14"}

    row_string = json.dumps(row_dict)
    row = pandas.read_json(row_string, typ='series')

    expected_a_dir = Path(RAW_DATA_ROOT_DIR / r'Scan Data - Pickering\P1361\B14\BSCAN Type A  B-14 Pickering B Unit-6 west 15-Oct-2013 160926 [A2370-2503][R0-3599].anf')
    expected_d_dir = Path(RAW_DATA_ROOT_DIR / r'Scan Data - Pickering\P1361\B14\BSCAN Type D  B-14 Pickering B Unit-6 west 15-Oct-2013 160926 [A2370-2503][R0-3599].anf')

    b_scan_a_dir, b_scan_d_dir = BScan_reader.build_path(row, RAW_DATA_ROOT_DIR)

    assert expected_a_dir == b_scan_a_dir
    assert expected_d_dir == b_scan_d_dir


@pytest.mark.unit_test
def test_invalid_outage():
    """
    Test Overview:
    Unit test to ensure that the load_bscan() raises an exception when it tries to load a file where the outage doesn't start with either 'P' or 'D'.

    Test Requirements:
    This test passes if load_bscan() raises an exception. This test fails if load_bscan() executes without raising an exception.

    Test Data:
    The test will attempt to load from an outage number "A1234"
    """
    row_dict = {"Outage Number": "A1234",
                "Filename": "BSCAN Type D  G-13 Darlington Unit-1 west 05-Apr-2017 034814 [A7630-7648][R1180-1550]",
                "Channel": "G-13"}

    row_string = json.dumps(row_dict)
    row = pandas.read_json(row_string, typ='series')

    with pytest.raises(ValueError):
        b_scan_a_dir, b_scan_d_dir = BScan_reader.build_path(row, RAW_DATA_ROOT_DIR)